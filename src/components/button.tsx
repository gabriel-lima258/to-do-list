import type React from "react";
import Icon from "./icon";
import { cva, type VariantProps } from "class-variance-authority";
import Text from "./text";

// üé® buttonVariants: define classes base e variantes para o container <button>
const buttonVariants = cva(
  `
  flex items-center justify-center cursor-pointer
  transition rounded-lg group gap-2
  `,
  {
    variants: {
      // eixo ‚Äúvariant‚Äù: muda a cor de fundo e o hover
      variant: {
        primary: "bg-gray-200 hover:bg-pink-light",
      },
      // eixo ‚Äúsize‚Äù: define altura e padding
      size: {
        md: "h-14 py-4 px-5",
      },
      // eixo ‚Äúdisabled‚Äù: aplica estilo quando o bot√£o est√° desabilitado
      disabled: {
        true: "pointer-events-none opacity-50",
      },
    },
    defaultVariants: {
      variant: "primary",  // cor padr√£o
      size: "md",          // tamanho padr√£o
      disabled: false,     // habilitado por padr√£o
    },
  },
);

// üñãÔ∏è buttonIconVariants: classes para o √≠cone dentro do bot√£o
export const buttonIconVariants = cva("transition", {
  variants: {
    // reutiliza o eixo ‚Äúvariant‚Äù para cor do √≠cone
    variant: {
      primary: "fill-pink-light",
    },
    // eixo ‚Äúsize‚Äù: define largura e altura do √≠cone
    size: {
      md: "w-5 h-5",
    },
  },
  defaultVariants: {
    variant: "primary",
    size: "md",
  },
});

// ‚úèÔ∏è buttonTextVariants: classes para o texto dentro do bot√£o
export const buttonTextVariants = cva("", {
  variants: {
    variant: {
      primary: "text-gray-400",
    },
  },
  defaultVariants: {
    variant: "primary",
  },
});

// üß© Props do componente Button
// - Omit<..., "size" | "disabled">: removemos as props nativas de button que colidem
// - VariantProps<typeof buttonVariants>: extrai { variant?, size?, disabled? }
// - icon?: tipo da SVG esperada pelo componente Icon
interface ButtonProps
  extends Omit<React.ComponentProps<"button">, "size" | "disabled">,
          VariantProps<typeof buttonVariants> {
  icon?: React.ComponentProps<typeof Icon>["svg"];
}

// üè∑Ô∏è Componente Button reutiliz√°vel
export default function Button({
  variant,         // cor de fundo / hover
  size,            // dimens√µes do bot√£o
  disabled,        // desabilita clique e reduz opacidade
  className,       // classes extras do usu√°rio
  children,        // conte√∫do textual
  icon: IconComponent, // componente SVG do √≠cone (opcional)
  ...props         // demais props nativas de <button> (onClick, type, aria-*, etc.)
}: ButtonProps) {
  return (
    <button
      // combina classes do CVA e quaisquer classes extras
      className={buttonVariants({ variant, size, disabled, className })}
      {...props}
    >
      {/* Se passou um √≠cone, renderiza-o com as classes definidas */}
      {IconComponent && (
        <Icon
          svg={IconComponent}
          className={buttonIconVariants({ variant, size })}
        />
      )}
      {/* Texto do bot√£o com estilo tipogr√°fico consistente */}
      <Text
        variant="body-md-bold"
        className={buttonTextVariants({ variant })}
      >
        {children}
      </Text>
    </button>
  );
}
